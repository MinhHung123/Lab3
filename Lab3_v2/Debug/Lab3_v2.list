
Lab3_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a60  08002a60  00003a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a84  08002a84  00004028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a84  08002a84  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a88  08002a88  00003a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08002a8c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000028  08002ab4  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002ab4  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008630  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c70  00000000  00000000  0000c681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0000e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000801  00000000  00000000  0000ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c6e  00000000  00000000  0000f579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c21c  00000000  00000000  000261e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008275a  00000000  00000000  00032403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000b4ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b7538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a48 	.word	0x08002a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002a48 	.word	0x08002a48

0800014c <display7SEG>:
		             0b0110000, 0b0011001, 0b0010010,
					 0b0000010, 0b1111000, 0b0000000,
					 0b0010000};
int led_buffer[4] = {0, 0, 0, 0};

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, LED_A_SGN_Pin | LED_B_SGN_Pin | LED_C_SGN_Pin
 8000154:	2201      	movs	r2, #1
 8000156:	217f      	movs	r1, #127	@ 0x7f
 8000158:	4835      	ldr	r0, [pc, #212]	@ (8000230 <display7SEG+0xe4>)
 800015a:	f001 fc5e 	bl	8001a1a <HAL_GPIO_WritePin>
			| LED_D_SGN_Pin | LED_E_SGN_Pin | LED_F_SGN_Pin
			| LED_G_SGN_Pin, SET);
	uint8_t number = digit[num];
 800015e:	4a35      	ldr	r2, [pc, #212]	@ (8000234 <display7SEG+0xe8>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	4413      	add	r3, r2
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LED_A_SGN_GPIO_Port, LED_A_SGN_Pin, (number & (1<<0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000168:	7bfb      	ldrb	r3, [r7, #15]
 800016a:	f003 0301 	and.w	r3, r3, #1
 800016e:	2b00      	cmp	r3, #0
 8000170:	bf0c      	ite	eq
 8000172:	2301      	moveq	r3, #1
 8000174:	2300      	movne	r3, #0
 8000176:	b2db      	uxtb	r3, r3
 8000178:	461a      	mov	r2, r3
 800017a:	2101      	movs	r1, #1
 800017c:	482c      	ldr	r0, [pc, #176]	@ (8000230 <display7SEG+0xe4>)
 800017e:	f001 fc4c 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_B_SGN_GPIO_Port, LED_B_SGN_Pin, (number & (1<<1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000182:	7bfb      	ldrb	r3, [r7, #15]
 8000184:	f003 0302 	and.w	r3, r3, #2
 8000188:	2b00      	cmp	r3, #0
 800018a:	bf0c      	ite	eq
 800018c:	2301      	moveq	r3, #1
 800018e:	2300      	movne	r3, #0
 8000190:	b2db      	uxtb	r3, r3
 8000192:	461a      	mov	r2, r3
 8000194:	2102      	movs	r1, #2
 8000196:	4826      	ldr	r0, [pc, #152]	@ (8000230 <display7SEG+0xe4>)
 8000198:	f001 fc3f 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_C_SGN_GPIO_Port, LED_C_SGN_Pin, (number & (1<<2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800019c:	7bfb      	ldrb	r3, [r7, #15]
 800019e:	f003 0304 	and.w	r3, r3, #4
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	bf0c      	ite	eq
 80001a6:	2301      	moveq	r3, #1
 80001a8:	2300      	movne	r3, #0
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	461a      	mov	r2, r3
 80001ae:	2104      	movs	r1, #4
 80001b0:	481f      	ldr	r0, [pc, #124]	@ (8000230 <display7SEG+0xe4>)
 80001b2:	f001 fc32 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_D_SGN_GPIO_Port, LED_D_SGN_Pin, (number & (1<<3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	2b00      	cmp	r3, #0
 80001be:	bf0c      	ite	eq
 80001c0:	2301      	moveq	r3, #1
 80001c2:	2300      	movne	r3, #0
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	461a      	mov	r2, r3
 80001c8:	2108      	movs	r1, #8
 80001ca:	4819      	ldr	r0, [pc, #100]	@ (8000230 <display7SEG+0xe4>)
 80001cc:	f001 fc25 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_E_SGN_GPIO_Port, LED_E_SGN_Pin, (number & (1<<4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	f003 0310 	and.w	r3, r3, #16
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	bf0c      	ite	eq
 80001da:	2301      	moveq	r3, #1
 80001dc:	2300      	movne	r3, #0
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	2110      	movs	r1, #16
 80001e4:	4812      	ldr	r0, [pc, #72]	@ (8000230 <display7SEG+0xe4>)
 80001e6:	f001 fc18 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_F_SGN_GPIO_Port, LED_F_SGN_Pin, (number & (1<<5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	f003 0320 	and.w	r3, r3, #32
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	bf0c      	ite	eq
 80001f4:	2301      	moveq	r3, #1
 80001f6:	2300      	movne	r3, #0
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	461a      	mov	r2, r3
 80001fc:	2120      	movs	r1, #32
 80001fe:	480c      	ldr	r0, [pc, #48]	@ (8000230 <display7SEG+0xe4>)
 8000200:	f001 fc0b 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_SGN_GPIO_Port, LED_G_SGN_Pin, (number & (1<<6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800020a:	2b00      	cmp	r3, #0
 800020c:	bf0c      	ite	eq
 800020e:	2301      	moveq	r3, #1
 8000210:	2300      	movne	r3, #0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	461a      	mov	r2, r3
 8000216:	2140      	movs	r1, #64	@ 0x40
 8000218:	4805      	ldr	r0, [pc, #20]	@ (8000230 <display7SEG+0xe4>)
 800021a:	f001 fbfe 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOT_SGN_GPIO_Port, LED_DOT_SGN_Pin, GPIO_PIN_RESET);
 800021e:	2200      	movs	r2, #0
 8000220:	2180      	movs	r1, #128	@ 0x80
 8000222:	4803      	ldr	r0, [pc, #12]	@ (8000230 <display7SEG+0xe4>)
 8000224:	f001 fbf9 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40010800 	.word	0x40010800
 8000234:	20000000 	.word	0x20000000

08000238 <unable_led_7SEG>:

void unable_led_7SEG(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_SGN_GPIO_Port, EN0_SGN_Pin, SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000242:	480b      	ldr	r0, [pc, #44]	@ (8000270 <unable_led_7SEG+0x38>)
 8000244:	f001 fbe9 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_SGN_GPIO_Port, EN1_SGN_Pin, SET);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024e:	4808      	ldr	r0, [pc, #32]	@ (8000270 <unable_led_7SEG+0x38>)
 8000250:	f001 fbe3 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_SGN_GPIO_Port, EN2_SGN_Pin, SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800025a:	4805      	ldr	r0, [pc, #20]	@ (8000270 <unable_led_7SEG+0x38>)
 800025c:	f001 fbdd 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_SGN_GPIO_Port, EN3_SGN_Pin, SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <unable_led_7SEG+0x38>)
 8000268:	f001 fbd7 	bl	8001a1a <HAL_GPIO_WritePin>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40010800 	.word	0x40010800

08000274 <update7SEG>:

void update7SEG(int index){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	unable_led_7SEG();
 800027c:	f7ff ffdc 	bl	8000238 <unable_led_7SEG>
	switch (index){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b03      	cmp	r3, #3
 8000284:	d839      	bhi.n	80002fa <update7SEG+0x86>
 8000286:	a201      	add	r2, pc, #4	@ (adr r2, 800028c <update7SEG+0x18>)
 8000288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028c:	0800029d 	.word	0x0800029d
 8000290:	080002b5 	.word	0x080002b5
 8000294:	080002cd 	.word	0x080002cd
 8000298:	080002e5 	.word	0x080002e5
	case 0:
		HAL_GPIO_WritePin(EN0_SGN_GPIO_Port, EN0_SGN_Pin, RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a2:	4818      	ldr	r0, [pc, #96]	@ (8000304 <update7SEG+0x90>)
 80002a4:	f001 fbb9 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80002a8:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <update7SEG+0x94>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4d 	bl	800014c <display7SEG>
		break;
 80002b2:	e023      	b.n	80002fc <update7SEG+0x88>
	case 1:
		HAL_GPIO_WritePin(EN1_SGN_GPIO_Port, EN1_SGN_Pin, RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ba:	4812      	ldr	r0, [pc, #72]	@ (8000304 <update7SEG+0x90>)
 80002bc:	f001 fbad 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <update7SEG+0x94>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff41 	bl	800014c <display7SEG>
		break;
 80002ca:	e017      	b.n	80002fc <update7SEG+0x88>
	case 2:
		HAL_GPIO_WritePin(EN2_SGN_GPIO_Port, EN2_SGN_Pin, RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002d2:	480c      	ldr	r0, [pc, #48]	@ (8000304 <update7SEG+0x90>)
 80002d4:	f001 fba1 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <update7SEG+0x94>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff35 	bl	800014c <display7SEG>
		break;
 80002e2:	e00b      	b.n	80002fc <update7SEG+0x88>
	case 3:
		HAL_GPIO_WritePin(EN3_SGN_GPIO_Port, EN3_SGN_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002ea:	4806      	ldr	r0, [pc, #24]	@ (8000304 <update7SEG+0x90>)
 80002ec:	f001 fb95 	bl	8001a1a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <update7SEG+0x94>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff29 	bl	800014c <display7SEG>
	default:
		break;
 80002fa:	bf00      	nop
	}
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40010800 	.word	0x40010800
 8000308:	20000044 	.word	0x20000044

0800030c <updateLedBuffer>:

void updateLedBuffer(int digit1, int digit2){
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
	int a = digit1%10;
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4b1c      	ldr	r3, [pc, #112]	@ (800038c <updateLedBuffer+0x80>)
 800031a:	fb83 1302 	smull	r1, r3, r3, r2
 800031e:	1099      	asrs	r1, r3, #2
 8000320:	17d3      	asrs	r3, r2, #31
 8000322:	1ac9      	subs	r1, r1, r3
 8000324:	460b      	mov	r3, r1
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	617b      	str	r3, [r7, #20]
	int b = digit1/10;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a16      	ldr	r2, [pc, #88]	@ (800038c <updateLedBuffer+0x80>)
 8000334:	fb82 1203 	smull	r1, r2, r2, r3
 8000338:	1092      	asrs	r2, r2, #2
 800033a:	17db      	asrs	r3, r3, #31
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	613b      	str	r3, [r7, #16]
	int c = digit2%10;
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4b12      	ldr	r3, [pc, #72]	@ (800038c <updateLedBuffer+0x80>)
 8000344:	fb83 1302 	smull	r1, r3, r3, r2
 8000348:	1099      	asrs	r1, r3, #2
 800034a:	17d3      	asrs	r3, r2, #31
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	460b      	mov	r3, r1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	60fb      	str	r3, [r7, #12]
	int d = digit2/10;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	4a0b      	ldr	r2, [pc, #44]	@ (800038c <updateLedBuffer+0x80>)
 800035e:	fb82 1203 	smull	r1, r2, r2, r3
 8000362:	1092      	asrs	r2, r2, #2
 8000364:	17db      	asrs	r3, r3, #31
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	60bb      	str	r3, [r7, #8]
	led_buffer[0] = b;
 800036a:	4a09      	ldr	r2, [pc, #36]	@ (8000390 <updateLedBuffer+0x84>)
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = a;
 8000370:	4a07      	ldr	r2, [pc, #28]	@ (8000390 <updateLedBuffer+0x84>)
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	6053      	str	r3, [r2, #4]
	led_buffer[2] = d;
 8000376:	4a06      	ldr	r2, [pc, #24]	@ (8000390 <updateLedBuffer+0x84>)
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	6093      	str	r3, [r2, #8]
	led_buffer[3] = c;
 800037c:	4a04      	ldr	r2, [pc, #16]	@ (8000390 <updateLedBuffer+0x84>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	60d3      	str	r3, [r2, #12]
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	66666667 	.word	0x66666667
 8000390:	20000044 	.word	0x20000044

08000394 <fsm_for_input_processing>:
    BUTTON_PRESSED_MORE_THAN_1_SECOND
};

enum ButtonState buttonState = BUTTON_RELEASED;

void fsm_for_input_processing(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    switch (buttonState) {
 8000398:	4b26      	ldr	r3, [pc, #152]	@ (8000434 <fsm_for_input_processing+0xa0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b02      	cmp	r3, #2
 800039e:	d02b      	beq.n	80003f8 <fsm_for_input_processing+0x64>
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	dc45      	bgt.n	8000430 <fsm_for_input_processing+0x9c>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <fsm_for_input_processing+0x1a>
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d00c      	beq.n	80003c6 <fsm_for_input_processing+0x32>
            	short_press_increase();
            	setTimer(3, 500);
            }
            break;
    }
}
 80003ac:	e040      	b.n	8000430 <fsm_for_input_processing+0x9c>
            if (is_button_pressed(1)) {
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 f92a 	bl	8000608 <is_button_pressed>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d035      	beq.n	8000426 <fsm_for_input_processing+0x92>
                buttonState = BUTTON_PRESSED;
 80003ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <fsm_for_input_processing+0xa0>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
                short_press_increase();
 80003c0:	f000 fe28 	bl	8001014 <short_press_increase>
            break;
 80003c4:	e02f      	b.n	8000426 <fsm_for_input_processing+0x92>
            if (!is_button_down(1)) {
 80003c6:	2001      	movs	r0, #1
 80003c8:	f000 f956 	bl	8000678 <is_button_down>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d103      	bne.n	80003da <fsm_for_input_processing+0x46>
                buttonState = BUTTON_RELEASED;
 80003d2:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <fsm_for_input_processing+0xa0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
            break;
 80003d8:	e027      	b.n	800042a <fsm_for_input_processing+0x96>
                if (is_button_pressed_1s(1)) {
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 f932 	bl	8000644 <is_button_pressed_1s>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d021      	beq.n	800042a <fsm_for_input_processing+0x96>
                	setTimer(3, 500);
 80003e6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80003ea:	2003      	movs	r0, #3
 80003ec:	f000 fa96 	bl	800091c <setTimer>
                    buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80003f0:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <fsm_for_input_processing+0xa0>)
 80003f2:	2202      	movs	r2, #2
 80003f4:	701a      	strb	r2, [r3, #0]
            break;
 80003f6:	e018      	b.n	800042a <fsm_for_input_processing+0x96>
            if (!is_button_down(1)) {
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 f93d 	bl	8000678 <is_button_down>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <fsm_for_input_processing+0x76>
                buttonState = BUTTON_RELEASED;
 8000404:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <fsm_for_input_processing+0xa0>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
            if(isTimerExperied(3)){
 800040a:	2003      	movs	r0, #3
 800040c:	f000 fad6 	bl	80009bc <isTimerExperied>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00b      	beq.n	800042e <fsm_for_input_processing+0x9a>
            	short_press_increase();
 8000416:	f000 fdfd 	bl	8001014 <short_press_increase>
            	setTimer(3, 500);
 800041a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800041e:	2003      	movs	r0, #3
 8000420:	f000 fa7c 	bl	800091c <setTimer>
            break;
 8000424:	e003      	b.n	800042e <fsm_for_input_processing+0x9a>
            break;
 8000426:	bf00      	nop
 8000428:	e002      	b.n	8000430 <fsm_for_input_processing+0x9c>
            break;
 800042a:	bf00      	nop
 800042c:	e000      	b.n	8000430 <fsm_for_input_processing+0x9c>
            break;
 800042e:	bf00      	nop
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000054 	.word	0x20000054

08000438 <button_init>:
static uint8_t pressed_flag[NO_OF_BUTTONS];
// Counter for automatically increasing the value
// after the button is pressed for more than 1 second
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void button_init(){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 800043e:	2300      	movs	r3, #0
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	e020      	b.n	8000486 <button_init+0x4e>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4a14      	ldr	r2, [pc, #80]	@ (8000498 <button_init+0x60>)
 8000448:	2101      	movs	r1, #1
 800044a:	54d1      	strb	r1, [r2, r3]
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	4912      	ldr	r1, [pc, #72]	@ (8000498 <button_init+0x60>)
 8000450:	5cc9      	ldrb	r1, [r1, r3]
 8000452:	4b12      	ldr	r3, [pc, #72]	@ (800049c <button_init+0x64>)
 8000454:	5499      	strb	r1, [r3, r2]
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <button_init+0x68>)
 800045a:	2101      	movs	r1, #1
 800045c:	54d1      	strb	r1, [r2, r3]
		lastStable[i] = BUTTON_IS_RELEASED;
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <button_init+0x6c>)
 8000462:	2101      	movs	r1, #1
 8000464:	54d1      	strb	r1, [r2, r3]
		pressed_flag[i] = 0;
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a0f      	ldr	r2, [pc, #60]	@ (80004a8 <button_init+0x70>)
 800046a:	2100      	movs	r1, #0
 800046c:	54d1      	strb	r1, [r2, r3]
		counterForButtonPress1s[i] = 0;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4a0e      	ldr	r2, [pc, #56]	@ (80004ac <button_init+0x74>)
 8000472:	2100      	movs	r1, #0
 8000474:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flagForButtonPress1s[i] = 0;
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <button_init+0x78>)
 800047c:	2100      	movs	r1, #0
 800047e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	3301      	adds	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d9db      	bls.n	8000444 <button_init+0xc>
	}
}
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000060 	.word	0x20000060
 800049c:	2000005c 	.word	0x2000005c
 80004a0:	20000058 	.word	0x20000058
 80004a4:	20000068 	.word	0x20000068
 80004a8:	20000070 	.word	0x20000070
 80004ac:	20000074 	.word	0x20000074
 80004b0:	2000006c 	.word	0x2000006c

080004b4 <button_reading>:

void button_reading(void) {
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	e087      	b.n	80005d0 <button_reading+0x11c>
    	debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4947      	ldr	r1, [pc, #284]	@ (80005e4 <button_reading+0x130>)
 80004c6:	5c89      	ldrb	r1, [r1, r2]
 80004c8:	4a47      	ldr	r2, [pc, #284]	@ (80005e8 <button_reading+0x134>)
 80004ca:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4946      	ldr	r1, [pc, #280]	@ (80005ec <button_reading+0x138>)
 80004d2:	5c89      	ldrb	r1, [r1, r2]
 80004d4:	4a43      	ldr	r2, [pc, #268]	@ (80005e4 <button_reading+0x130>)
 80004d6:	54d1      	strb	r1, [r2, r3]
        switch (i){
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d01c      	beq.n	8000518 <button_reading+0x64>
 80004de:	2b02      	cmp	r3, #2
 80004e0:	dc25      	bgt.n	800052e <button_reading+0x7a>
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d002      	beq.n	80004ec <button_reading+0x38>
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d00b      	beq.n	8000502 <button_reading+0x4e>
				break;
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
				break;
			default:
				break;
 80004ea:	e020      	b.n	800052e <button_reading+0x7a>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_0_GPIO_Port, BTN_0_Pin);
 80004ec:	79fc      	ldrb	r4, [r7, #7]
 80004ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f2:	483f      	ldr	r0, [pc, #252]	@ (80005f0 <button_reading+0x13c>)
 80004f4:	f001 fa7a 	bl	80019ec <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b3b      	ldr	r3, [pc, #236]	@ (80005ec <button_reading+0x138>)
 80004fe:	551a      	strb	r2, [r3, r4]
				break;
 8000500:	e016      	b.n	8000530 <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 8000502:	79fc      	ldrb	r4, [r7, #7]
 8000504:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000508:	4839      	ldr	r0, [pc, #228]	@ (80005f0 <button_reading+0x13c>)
 800050a:	f001 fa6f 	bl	80019ec <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <button_reading+0x138>)
 8000514:	551a      	strb	r2, [r3, r4]
				break;
 8000516:	e00b      	b.n	8000530 <button_reading+0x7c>
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 8000518:	79fc      	ldrb	r4, [r7, #7]
 800051a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051e:	4834      	ldr	r0, [pc, #208]	@ (80005f0 <button_reading+0x13c>)
 8000520:	f001 fa64 	bl	80019ec <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b30      	ldr	r3, [pc, #192]	@ (80005ec <button_reading+0x138>)
 800052a:	551a      	strb	r2, [r3, r4]
				break;
 800052c:	e000      	b.n	8000530 <button_reading+0x7c>
				break;
 800052e:	bf00      	nop
		}
        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i]) {
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a2e      	ldr	r2, [pc, #184]	@ (80005ec <button_reading+0x138>)
 8000534:	5cd2      	ldrb	r2, [r2, r3]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	492a      	ldr	r1, [pc, #168]	@ (80005e4 <button_reading+0x130>)
 800053a:	5ccb      	ldrb	r3, [r1, r3]
 800053c:	429a      	cmp	r2, r3
 800053e:	d10d      	bne.n	800055c <button_reading+0xa8>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4a28      	ldr	r2, [pc, #160]	@ (80005e4 <button_reading+0x130>)
 8000544:	5cd2      	ldrb	r2, [r2, r3]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4927      	ldr	r1, [pc, #156]	@ (80005e8 <button_reading+0x134>)
 800054a:	5ccb      	ldrb	r3, [r1, r3]
 800054c:	429a      	cmp	r2, r3
 800054e:	d105      	bne.n	800055c <button_reading+0xa8>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 8000550:	79fa      	ldrb	r2, [r7, #7]
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4925      	ldr	r1, [pc, #148]	@ (80005ec <button_reading+0x138>)
 8000556:	5c89      	ldrb	r1, [r1, r2]
 8000558:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <button_reading+0x140>)
 800055a:	54d1      	strb	r1, [r2, r3]
        }
        if (lastStable[i] == BUTTON_IS_RELEASED && buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <button_reading+0x144>)
 8000560:	5cd3      	ldrb	r3, [r2, r3]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d108      	bne.n	8000578 <button_reading+0xc4>
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4a22      	ldr	r2, [pc, #136]	@ (80005f4 <button_reading+0x140>)
 800056a:	5cd3      	ldrb	r3, [r2, r3]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <button_reading+0xc4>
        	pressed_flag[i] = 1;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4a22      	ldr	r2, [pc, #136]	@ (80005fc <button_reading+0x148>)
 8000574:	2101      	movs	r1, #1
 8000576:	54d1      	strb	r1, [r2, r3]
        }
        if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4a1e      	ldr	r2, [pc, #120]	@ (80005f4 <button_reading+0x140>)
 800057c:	5cd3      	ldrb	r3, [r2, r3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d114      	bne.n	80005ac <button_reading+0xf8>
            // If a button is pressed, we start counting
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <button_reading+0x14c>)
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	2b63      	cmp	r3, #99	@ 0x63
 800058c:	d809      	bhi.n	80005a2 <button_reading+0xee>
                counterForButtonPress1s[i]++;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4a1b      	ldr	r2, [pc, #108]	@ (8000600 <button_reading+0x14c>)
 8000592:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000596:	3201      	adds	r2, #1
 8000598:	b291      	uxth	r1, r2
 800059a:	4a19      	ldr	r2, [pc, #100]	@ (8000600 <button_reading+0x14c>)
 800059c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005a0:	e00d      	b.n	80005be <button_reading+0x10a>
            } else {
                // The flag is turned on when 1 second has passed
                // since the button was pressed
                flagForButtonPress1s[i] = 1;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a17      	ldr	r2, [pc, #92]	@ (8000604 <button_reading+0x150>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	54d1      	strb	r1, [r2, r3]
 80005aa:	e008      	b.n	80005be <button_reading+0x10a>
                // TODO: Handle long-press action
            }
        } else {
            counterForButtonPress1s[i] = 0;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <button_reading+0x14c>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <button_reading+0x150>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	54d1      	strb	r1, [r2, r3]
        }
        lastStable[i] = buttonBuffer[i];
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	490c      	ldr	r1, [pc, #48]	@ (80005f4 <button_reading+0x140>)
 80005c4:	5c89      	ldrb	r1, [r1, r2]
 80005c6:	4a0c      	ldr	r2, [pc, #48]	@ (80005f8 <button_reading+0x144>)
 80005c8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	3301      	adds	r3, #1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	f67f af74 	bls.w	80004c0 <button_reading+0xc>
    }
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000060 	.word	0x20000060
 80005e8:	20000064 	.word	0x20000064
 80005ec:	2000005c 	.word	0x2000005c
 80005f0:	40010c00 	.word	0x40010c00
 80005f4:	20000058 	.word	0x20000058
 80005f8:	20000068 	.word	0x20000068
 80005fc:	20000070 	.word	0x20000070
 8000600:	20000074 	.word	0x20000074
 8000604:	2000006c 	.word	0x2000006c

08000608 <is_button_pressed>:


int is_button_pressed(uint8_t index) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d901      	bls.n	800061c <is_button_pressed+0x14>
 8000618:	2300      	movs	r3, #0
 800061a:	e00b      	b.n	8000634 <is_button_pressed+0x2c>
	if (pressed_flag[index]) {
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <is_button_pressed+0x38>)
 8000620:	5cd3      	ldrb	r3, [r2, r3]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <is_button_pressed+0x2a>
		pressed_flag[index] = 0;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <is_button_pressed+0x38>)
 800062a:	2100      	movs	r1, #0
 800062c:	54d1      	strb	r1, [r2, r3]
		return 1;
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <is_button_pressed+0x2c>
	}
	return 0;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000070 	.word	0x20000070

08000644 <is_button_pressed_1s>:

int is_button_pressed_1s(unsigned char index){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d901      	bls.n	8000658 <is_button_pressed_1s+0x14>
 8000654:	2300      	movs	r3, #0
 8000656:	e007      	b.n	8000668 <is_button_pressed_1s+0x24>
	if(flagForButtonPress1s[index] == 1) return 1;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4a06      	ldr	r2, [pc, #24]	@ (8000674 <is_button_pressed_1s+0x30>)
 800065c:	5cd3      	ldrb	r3, [r2, r3]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d101      	bne.n	8000666 <is_button_pressed_1s+0x22>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <is_button_pressed_1s+0x24>
	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000006c 	.word	0x2000006c

08000678 <is_button_down>:

int is_button_down(uint8_t index){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    if(index >= NO_OF_BUTTONS) return 0;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d901      	bls.n	800068c <is_button_down+0x14>
 8000688:	2300      	movs	r3, #0
 800068a:	e007      	b.n	800069c <is_button_down+0x24>
    extern GPIO_PinState buttonBuffer[];
    return buttonBuffer[index] == BUTTON_IS_PRESSED;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <is_button_down+0x30>)
 8000690:	5cd3      	ldrb	r3, [r2, r3]
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf0c      	ite	eq
 8000696:	2301      	moveq	r3, #1
 8000698:	2300      	movne	r3, #0
 800069a:	b2db      	uxtb	r3, r3
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000058 	.word	0x20000058

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 feb0 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f812 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f898 	bl	80007ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80006bc:	f000 f84a 	bl	8000754 <MX_TIM2_Init>
  button_init();
 80006c0:	f7ff feba 	bl	8000438 <button_init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <main+0x2c>)
 80006c6:	f001 fe07 	bl	80022d8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 80006ca:	f7ff fe63 	bl	8000394 <fsm_for_input_processing>
	  fsm_traffic_run();
 80006ce:	f000 fa21 	bl	8000b14 <fsm_traffic_run>
	  fsm_for_input_processing();
 80006d2:	bf00      	nop
 80006d4:	e7f9      	b.n	80006ca <main+0x1e>
 80006d6:	bf00      	nop
 80006d8:	2000007c 	.word	0x2000007c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b090      	sub	sp, #64	@ 0x40
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2228      	movs	r2, #40	@ 0x28
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f980 	bl	80029f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f9b2 	bl	8001a7c <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800071e:	f000 f8f7 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fc20 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000746:	f000 f8e3 	bl	8000910 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3740      	adds	r7, #64	@ 0x40
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_TIM2_Init+0x94>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_TIM2_Init+0x94>)
 800077a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800077e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_TIM2_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_TIM2_Init+0x94>)
 8000788:	2209      	movs	r2, #9
 800078a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_TIM2_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_TIM2_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000798:	4813      	ldr	r0, [pc, #76]	@ (80007e8 <MX_TIM2_Init+0x94>)
 800079a:	f001 fd4d 	bl	8002238 <HAL_TIM_Base_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007a4:	f000 f8b4 	bl	8000910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <MX_TIM2_Init+0x94>)
 80007b6:	f001 fecb 	bl	8002550 <HAL_TIM_ConfigClockSource>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 f8a6 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_TIM2_Init+0x94>)
 80007d2:	f002 f8a3 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007dc:	f000 f898 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000007c 	.word	0x2000007c

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a27      	ldr	r2, [pc, #156]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A_SGN_Pin|LED_B_SGN_Pin|LED_C_SGN_Pin|LED_D_SGN_Pin
 8000830:	2200      	movs	r2, #0
 8000832:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8000836:	481c      	ldr	r0, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000838:	f001 f8ef 	bl	8001a1a <HAL_GPIO_WritePin>
                          |LED_E_SGN_Pin|LED_F_SGN_Pin|LED_G_SGN_Pin|LED_DOT_SGN_Pin
                          |EN0_SGN_Pin|EN1_SGN_Pin|EN2_SGN_Pin|EN3_SGN_Pin
                          |LED_RED_SGN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_0_SGN_Pin|YEL_0_SGN_Pin|GRE_0_SGN_Pin|RED_1_SGN_Pin
 800083c:	2200      	movs	r2, #0
 800083e:	213f      	movs	r1, #63	@ 0x3f
 8000840:	481a      	ldr	r0, [pc, #104]	@ (80008ac <MX_GPIO_Init+0xc0>)
 8000842:	f001 f8ea 	bl	8001a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_A_SGN_Pin LED_B_SGN_Pin LED_C_SGN_Pin LED_D_SGN_Pin
                           LED_E_SGN_Pin LED_F_SGN_Pin LED_G_SGN_Pin LED_DOT_SGN_Pin
                           EN0_SGN_Pin EN1_SGN_Pin EN2_SGN_Pin EN3_SGN_Pin
                           LED_RED_SGN_Pin */
  GPIO_InitStruct.Pin = LED_A_SGN_Pin|LED_B_SGN_Pin|LED_C_SGN_Pin|LED_D_SGN_Pin
 8000846:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800084a:	60bb      	str	r3, [r7, #8]
                          |LED_E_SGN_Pin|LED_F_SGN_Pin|LED_G_SGN_Pin|LED_DOT_SGN_Pin
                          |EN0_SGN_Pin|EN1_SGN_Pin|EN2_SGN_Pin|EN3_SGN_Pin
                          |LED_RED_SGN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000860:	f000 ff48 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_0_SGN_Pin YEL_0_SGN_Pin GRE_0_SGN_Pin RED_1_SGN_Pin
                           YEL_1_SGN_Pin GRE_1_SGN_Pin */
  GPIO_InitStruct.Pin = RED_0_SGN_Pin|YEL_0_SGN_Pin|GRE_0_SGN_Pin|RED_1_SGN_Pin
 8000864:	233f      	movs	r3, #63	@ 0x3f
 8000866:	60bb      	str	r3, [r7, #8]
                          |YEL_1_SGN_Pin|GRE_1_SGN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_GPIO_Init+0xc0>)
 800087c:	f000 ff3a 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_0_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin|BTN_1_Pin|BTN_2_Pin;
 8000880:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	2301      	movs	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_GPIO_Init+0xc0>)
 8000896:	f000 ff2d 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010800 	.word	0x40010800
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int cur = 0;
int counter = 15;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c0:	d103      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80008c2:	f7ff fdf7 	bl	80004b4 <button_reading>
		timer_run();
 80008c6:	f000 f849 	bl	800095c <timer_run>
	}
	counter--;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008d2:	6013      	str	r3, [r2, #0]
	if(counter<=0){
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dc11      	bgt.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x50>
		counter = 25;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008de:	2219      	movs	r2, #25
 80008e0:	601a      	str	r2, [r3, #0]
		update7SEG(cur++);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	4908      	ldr	r1, [pc, #32]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008ea:	600a      	str	r2, [r1, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fcc1 	bl	8000274 <update7SEG>
		if(cur >= 4) cur = 0;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	dd02      	ble.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x50>
 80008fa:	4b04      	ldr	r3, [pc, #16]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
	}
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000000c 	.word	0x2000000c
 800090c:	200000c4 	.word	0x200000c4

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <setTimer>:
#define number_timer 4

int timer_flag[number_timer] = {0};
int timer_counter[number_timer] = {0};

void setTimer(int index, int duration){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIMER_CYCLE;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <setTimer+0x34>)
 800092a:	fb82 1203 	smull	r1, r2, r2, r3
 800092e:	1092      	asrs	r2, r2, #2
 8000930:	17db      	asrs	r3, r3, #31
 8000932:	1ad2      	subs	r2, r2, r3
 8000934:	4907      	ldr	r1, [pc, #28]	@ (8000954 <setTimer+0x38>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <setTimer+0x3c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2100      	movs	r1, #0
 8000942:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	66666667 	.word	0x66666667
 8000954:	200000d8 	.word	0x200000d8
 8000958:	200000c8 	.word	0x200000c8

0800095c <timer_run>:

void timer_run(){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
	for(int i=0; i<number_timer; i++){
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	e01c      	b.n	80009a2 <timer_run+0x46>
		if(timer_counter[i] > 0){
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <timer_run+0x58>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000970:	2b00      	cmp	r3, #0
 8000972:	dd13      	ble.n	800099c <timer_run+0x40>
			timer_counter[i]--;
 8000974:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <timer_run+0x58>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	490d      	ldr	r1, [pc, #52]	@ (80009b4 <timer_run+0x58>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0){
 8000986:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <timer_run+0x58>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d104      	bne.n	800099c <timer_run+0x40>
				timer_flag[i] = 1;
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <timer_run+0x5c>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2101      	movs	r1, #1
 8000998:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<number_timer; i++){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3301      	adds	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	dddf      	ble.n	8000968 <timer_run+0xc>
			}
		}
	}
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	200000d8 	.word	0x200000d8
 80009b8:	200000c8 	.word	0x200000c8

080009bc <isTimerExperied>:

int isTimerExperied(int index){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1){
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <isTimerExperied+0x30>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d106      	bne.n	80009de <isTimerExperied+0x22>
		timer_flag[index] = 0;
 80009d0:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <isTimerExperied+0x30>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2100      	movs	r1, #0
 80009d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <isTimerExperied+0x24>
	}
	return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000c8 	.word	0x200000c8

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <HAL_MspInit+0x5c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a14      	ldr	r2, [pc, #80]	@ (8000a4c <HAL_MspInit+0x5c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_MspInit+0x5c>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <HAL_MspInit+0x5c>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <HAL_MspInit+0x5c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <HAL_MspInit+0x5c>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_MspInit+0x60>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_MspInit+0x60>)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010000 	.word	0x40010000

08000a54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a64:	d113      	bne.n	8000a8e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HAL_TIM_Base_MspInit+0x44>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_TIM_Base_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_TIM_Base_MspInit+0x44>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	201c      	movs	r0, #28
 8000a84:	f000 fdff 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a88:	201c      	movs	r0, #28
 8000a8a:	f000 fe18 	bl	80016be <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fcd8 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <TIM2_IRQHandler+0x10>)
 8000afa:	f001 fc39 	bl	8002370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000007c 	.word	0x2000007c

08000b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <fsm_traffic_run>:

static enum TrafficState status = INIT;
int counter1 = 0, counter2 = 0;
int red = 7000, grn = 5000, yel = 2000;

void fsm_traffic_run(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	switch (status){
 8000b18:	4b8a      	ldr	r3, [pc, #552]	@ (8000d44 <fsm_traffic_run+0x230>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	f200 8216 	bhi.w	8000f4e <fsm_traffic_run+0x43a>
 8000b22:	a201      	add	r2, pc, #4	@ (adr r2, 8000b28 <fsm_traffic_run+0x14>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000b49 	.word	0x08000b49
 8000b2c:	08000b9f 	.word	0x08000b9f
 8000b30:	08000c69 	.word	0x08000c69
 8000b34:	08000d65 	.word	0x08000d65
 8000b38:	08000e3f 	.word	0x08000e3f
 8000b3c:	08000eb9 	.word	0x08000eb9
 8000b40:	08000eeb 	.word	0x08000eeb
 8000b44:	08000f1d 	.word	0x08000f1d
	case INIT:
		setTimer(0, 1000);
 8000b48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fee5 	bl	800091c <setTimer>
		setTimer(1, grn);
 8000b52:	4b7d      	ldr	r3, [pc, #500]	@ (8000d48 <fsm_traffic_run+0x234>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fedf 	bl	800091c <setTimer>
		counter1 = red/1000;
 8000b5e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d4c <fsm_traffic_run+0x238>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a7b      	ldr	r2, [pc, #492]	@ (8000d50 <fsm_traffic_run+0x23c>)
 8000b64:	fb82 1203 	smull	r1, r2, r2, r3
 8000b68:	1192      	asrs	r2, r2, #6
 8000b6a:	17db      	asrs	r3, r3, #31
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4a79      	ldr	r2, [pc, #484]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000b70:	6013      	str	r3, [r2, #0]
		counter2 = grn/1000;
 8000b72:	4b75      	ldr	r3, [pc, #468]	@ (8000d48 <fsm_traffic_run+0x234>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a76      	ldr	r2, [pc, #472]	@ (8000d50 <fsm_traffic_run+0x23c>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1192      	asrs	r2, r2, #6
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	4a75      	ldr	r2, [pc, #468]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000b84:	6013      	str	r3, [r2, #0]
		updateLedBuffer(counter1, counter2);
 8000b86:	4b73      	ldr	r3, [pc, #460]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a73      	ldr	r2, [pc, #460]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fbbb 	bl	800030c <updateLedBuffer>
		status = AUTO_RED_GRN;
 8000b96:	4b6b      	ldr	r3, [pc, #428]	@ (8000d44 <fsm_traffic_run+0x230>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
		break;
 8000b9c:	e1e6      	b.n	8000f6c <fsm_traffic_run+0x458>
	case AUTO_RED_GRN:
		turn_on_red_grn();
 8000b9e:	f000 fa87 	bl	80010b0 <turn_on_red_grn>
		if(isTimerExperied(0)){
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff0a 	bl	80009bc <isTimerExperied>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d016      	beq.n	8000bdc <fsm_traffic_run+0xc8>
			counter1--;
 8000bae:	4b69      	ldr	r3, [pc, #420]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	4a67      	ldr	r2, [pc, #412]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000bb6:	6013      	str	r3, [r2, #0]
			counter2--;
 8000bb8:	4b67      	ldr	r3, [pc, #412]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000bc0:	6013      	str	r3, [r2, #0]
			updateLedBuffer(counter1, counter2);
 8000bc2:	4b64      	ldr	r3, [pc, #400]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a64      	ldr	r2, [pc, #400]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fb9d 	bl	800030c <updateLedBuffer>
			setTimer(0, 1000);
 8000bd2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fea0 	bl	800091c <setTimer>
		}
		if(is_button_pressed(0)){
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd13 	bl	8000608 <is_button_pressed>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00d      	beq.n	8000c04 <fsm_traffic_run+0xf0>
			HAL_GPIO_WritePin(LED_RED_SGN_GPIO_Port, LED_RED_SGN_Pin, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bee:	485b      	ldr	r0, [pc, #364]	@ (8000d5c <fsm_traffic_run+0x248>)
 8000bf0:	f000 ff13 	bl	8001a1a <HAL_GPIO_WritePin>
			setTimer(2, 500);
 8000bf4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fe8f 	bl	800091c <setTimer>
			status = RED_CONFIG;
 8000bfe:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <fsm_traffic_run+0x230>)
 8000c00:	2205      	movs	r2, #5
 8000c02:	701a      	strb	r2, [r3, #0]
		}
		if(isTimerExperied(1)){
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fed9 	bl	80009bc <isTimerExperied>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 81a0 	beq.w	8000f52 <fsm_traffic_run+0x43e>
			counter1 = yel/1000;
 8000c12:	4b53      	ldr	r3, [pc, #332]	@ (8000d60 <fsm_traffic_run+0x24c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a4e      	ldr	r2, [pc, #312]	@ (8000d50 <fsm_traffic_run+0x23c>)
 8000c18:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1c:	1192      	asrs	r2, r2, #6
 8000c1e:	17db      	asrs	r3, r3, #31
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	4a4c      	ldr	r2, [pc, #304]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000c24:	6013      	str	r3, [r2, #0]
			counter2 = yel/1000;
 8000c26:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <fsm_traffic_run+0x24c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a49      	ldr	r2, [pc, #292]	@ (8000d50 <fsm_traffic_run+0x23c>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1192      	asrs	r2, r2, #6
 8000c32:	17db      	asrs	r3, r3, #31
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a48      	ldr	r2, [pc, #288]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000c38:	6013      	str	r3, [r2, #0]
			setTimer(0, 1000);
 8000c3a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fe6c 	bl	800091c <setTimer>
			setTimer(1, yel);
 8000c44:	4b46      	ldr	r3, [pc, #280]	@ (8000d60 <fsm_traffic_run+0x24c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fe66 	bl	800091c <setTimer>
			updateLedBuffer(counter1, counter2);
 8000c50:	4b40      	ldr	r3, [pc, #256]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a40      	ldr	r2, [pc, #256]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fb56 	bl	800030c <updateLedBuffer>
			status = AUTO_RED_YEL;
 8000c60:	4b38      	ldr	r3, [pc, #224]	@ (8000d44 <fsm_traffic_run+0x230>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c66:	e174      	b.n	8000f52 <fsm_traffic_run+0x43e>
	case AUTO_RED_YEL:
		turn_on_red_yel();
 8000c68:	f000 fa46 	bl	80010f8 <turn_on_red_yel>
		if(isTimerExperied(0)){
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fea5 	bl	80009bc <isTimerExperied>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d016      	beq.n	8000ca6 <fsm_traffic_run+0x192>
			counter1--;
 8000c78:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a35      	ldr	r2, [pc, #212]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000c80:	6013      	str	r3, [r2, #0]
			counter2--;
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4a33      	ldr	r2, [pc, #204]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000c8a:	6013      	str	r3, [r2, #0]
			updateLedBuffer(counter1, counter2);
 8000c8c:	4b31      	ldr	r3, [pc, #196]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fb38 	bl	800030c <updateLedBuffer>
			setTimer(0, 1000);
 8000c9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fe3b 	bl	800091c <setTimer>
		}
		if(is_button_pressed(0)){
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fcae 	bl	8000608 <is_button_pressed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00d      	beq.n	8000cce <fsm_traffic_run+0x1ba>
			HAL_GPIO_WritePin(LED_RED_SGN_GPIO_Port, LED_RED_SGN_Pin, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb8:	4828      	ldr	r0, [pc, #160]	@ (8000d5c <fsm_traffic_run+0x248>)
 8000cba:	f000 feae 	bl	8001a1a <HAL_GPIO_WritePin>
			setTimer(2, 500);
 8000cbe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff fe2a 	bl	800091c <setTimer>
			status = RED_CONFIG;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <fsm_traffic_run+0x230>)
 8000cca:	2205      	movs	r2, #5
 8000ccc:	701a      	strb	r2, [r3, #0]
		}
		if(isTimerExperied(1)){
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff fe74 	bl	80009bc <isTimerExperied>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 813d 	beq.w	8000f56 <fsm_traffic_run+0x442>
			counter1 = grn/1000;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <fsm_traffic_run+0x234>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <fsm_traffic_run+0x23c>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1192      	asrs	r2, r2, #6
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a19      	ldr	r2, [pc, #100]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000cee:	6013      	str	r3, [r2, #0]
			counter2 = red/1000;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <fsm_traffic_run+0x238>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a16      	ldr	r2, [pc, #88]	@ (8000d50 <fsm_traffic_run+0x23c>)
 8000cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfa:	1192      	asrs	r2, r2, #6
 8000cfc:	17db      	asrs	r3, r3, #31
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000d02:	6013      	str	r3, [r2, #0]
			updateLedBuffer(counter1, counter2);
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a13      	ldr	r2, [pc, #76]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fafc 	bl	800030c <updateLedBuffer>
			setTimer(0, 1000);
 8000d14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fdff 	bl	800091c <setTimer>
			setTimer(1, grn);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <fsm_traffic_run+0x234>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fdf9 	bl	800091c <setTimer>
			updateLedBuffer(counter1, counter2);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <fsm_traffic_run+0x240>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <fsm_traffic_run+0x244>)
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fae9 	bl	800030c <updateLedBuffer>
			status = AUTO_GRN_RED;
 8000d3a:	4b02      	ldr	r3, [pc, #8]	@ (8000d44 <fsm_traffic_run+0x230>)
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d40:	e109      	b.n	8000f56 <fsm_traffic_run+0x442>
 8000d42:	bf00      	nop
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	20000018 	.word	0x20000018
 8000d4c:	20000014 	.word	0x20000014
 8000d50:	10624dd3 	.word	0x10624dd3
 8000d54:	200000ec 	.word	0x200000ec
 8000d58:	200000f0 	.word	0x200000f0
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	2000001c 	.word	0x2000001c
	case AUTO_GRN_RED:
		turn_on_grn_red();
 8000d64:	f000 f9ec 	bl	8001140 <turn_on_grn_red>
		if(isTimerExperied(0)){
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fe27 	bl	80009bc <isTimerExperied>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d016      	beq.n	8000da2 <fsm_traffic_run+0x28e>
			counter1--;
 8000d74:	4b7e      	ldr	r3, [pc, #504]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000d7c:	6013      	str	r3, [r2, #0]
			counter2--;
 8000d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	4a7b      	ldr	r2, [pc, #492]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000d86:	6013      	str	r3, [r2, #0]
			updateLedBuffer(counter1, counter2);
 8000d88:	4b79      	ldr	r3, [pc, #484]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a79      	ldr	r2, [pc, #484]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff faba 	bl	800030c <updateLedBuffer>
			setTimer(0, 1000);
 8000d98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fdbd 	bl	800091c <setTimer>
		}
		if(isTimerExperied(1)){
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fe0a 	bl	80009bc <isTimerExperied>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d031      	beq.n	8000e12 <fsm_traffic_run+0x2fe>
			counter1 = yel/1000;
 8000dae:	4b72      	ldr	r3, [pc, #456]	@ (8000f78 <fsm_traffic_run+0x464>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a72      	ldr	r2, [pc, #456]	@ (8000f7c <fsm_traffic_run+0x468>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1192      	asrs	r2, r2, #6
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	4a6c      	ldr	r2, [pc, #432]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000dc0:	6013      	str	r3, [r2, #0]
			counter2 = yel/1000;
 8000dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f78 <fsm_traffic_run+0x464>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a6d      	ldr	r2, [pc, #436]	@ (8000f7c <fsm_traffic_run+0x468>)
 8000dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dcc:	1192      	asrs	r2, r2, #6
 8000dce:	17db      	asrs	r3, r3, #31
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	4a68      	ldr	r2, [pc, #416]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000dd4:	6013      	str	r3, [r2, #0]
			updateLedBuffer(counter1, counter2);
 8000dd6:	4b66      	ldr	r3, [pc, #408]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a66      	ldr	r2, [pc, #408]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fa93 	bl	800030c <updateLedBuffer>
			setTimer(0, 1000);
 8000de6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fd96 	bl	800091c <setTimer>
			setTimer(1, yel);
 8000df0:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <fsm_traffic_run+0x464>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fd90 	bl	800091c <setTimer>
			updateLedBuffer(counter1, counter2);
 8000dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a5c      	ldr	r2, [pc, #368]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fa80 	bl	800030c <updateLedBuffer>
			status = AUTO_YEL_RED;
 8000e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000e0e:	2204      	movs	r2, #4
 8000e10:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(0)){
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fbf8 	bl	8000608 <is_button_pressed>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 809d 	beq.w	8000f5a <fsm_traffic_run+0x446>
			HAL_GPIO_WritePin(LED_RED_SGN_GPIO_Port, LED_RED_SGN_Pin, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e26:	4857      	ldr	r0, [pc, #348]	@ (8000f84 <fsm_traffic_run+0x470>)
 8000e28:	f000 fdf7 	bl	8001a1a <HAL_GPIO_WritePin>
			setTimer(2, 500);
 8000e2c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fd73 	bl	800091c <setTimer>
			status = RED_CONFIG;
 8000e36:	4b52      	ldr	r3, [pc, #328]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000e38:	2205      	movs	r2, #5
 8000e3a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e3c:	e08d      	b.n	8000f5a <fsm_traffic_run+0x446>
	case AUTO_YEL_RED:
		turn_on_yel_red();
 8000e3e:	f000 f9a3 	bl	8001188 <turn_on_yel_red>
		if(isTimerExperied(0)){
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fdba 	bl	80009bc <isTimerExperied>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d016      	beq.n	8000e7c <fsm_traffic_run+0x368>
			counter1--;
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a46      	ldr	r2, [pc, #280]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000e56:	6013      	str	r3, [r2, #0]
			counter2--;
 8000e58:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	4a45      	ldr	r2, [pc, #276]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000e60:	6013      	str	r3, [r2, #0]
			updateLedBuffer(counter1, counter2);
 8000e62:	4b43      	ldr	r3, [pc, #268]	@ (8000f70 <fsm_traffic_run+0x45c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a43      	ldr	r2, [pc, #268]	@ (8000f74 <fsm_traffic_run+0x460>)
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fa4d 	bl	800030c <updateLedBuffer>
			setTimer(0, 1000);
 8000e72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fd50 	bl	800091c <setTimer>
		}
		if(isTimerExperied(1)){
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff fd9d 	bl	80009bc <isTimerExperied>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <fsm_traffic_run+0x37a>
			status = INIT;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		}
		if(is_button_pressed(0)){
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fbba 	bl	8000608 <is_button_pressed>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d061      	beq.n	8000f5e <fsm_traffic_run+0x44a>
			HAL_GPIO_WritePin(LED_RED_SGN_GPIO_Port, LED_RED_SGN_Pin, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea0:	4838      	ldr	r0, [pc, #224]	@ (8000f84 <fsm_traffic_run+0x470>)
 8000ea2:	f000 fdba 	bl	8001a1a <HAL_GPIO_WritePin>
			setTimer(2, 500);
 8000ea6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff fd36 	bl	800091c <setTimer>
			status = RED_CONFIG;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000eb6:	e052      	b.n	8000f5e <fsm_traffic_run+0x44a>
	case RED_CONFIG:
		turn_red_blinky();
 8000eb8:	f000 f98a 	bl	80011d0 <turn_red_blinky>
		show_config_val();
 8000ebc:	f000 f864 	bl	8000f88 <show_config_val>
		if(is_button_pressed(0)) status = YEL_CONFIG;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fba1 	bl	8000608 <is_button_pressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <fsm_traffic_run+0x3be>
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000ece:	2206      	movs	r2, #6
 8000ed0:	701a      	strb	r2, [r3, #0]
		if(is_button_pressed(2)){
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f7ff fb98 	bl	8000608 <is_button_pressed>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d041      	beq.n	8000f62 <fsm_traffic_run+0x44e>
			ensure_red_time();
 8000ede:	f000 fa01 	bl	80012e4 <ensure_red_time>
			status = INIT;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ee8:	e03b      	b.n	8000f62 <fsm_traffic_run+0x44e>
	case YEL_CONFIG:
		turn_yel_blinky();
 8000eea:	f000 f99f 	bl	800122c <turn_yel_blinky>
		show_config_val();
 8000eee:	f000 f84b 	bl	8000f88 <show_config_val>
		if(is_button_pressed(0)) status = GRN_CONFIG;
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fb88 	bl	8000608 <is_button_pressed>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <fsm_traffic_run+0x3f0>
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	701a      	strb	r2, [r3, #0]
		if(is_button_pressed(2)) {
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fb7f 	bl	8000608 <is_button_pressed>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d02a      	beq.n	8000f66 <fsm_traffic_run+0x452>
			ensure_yel_time();
 8000f10:	f000 fa34 	bl	800137c <ensure_yel_time>
			status = INIT;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f1a:	e024      	b.n	8000f66 <fsm_traffic_run+0x452>
	case GRN_CONFIG:
		turn_grn_blinky();
 8000f1c:	f000 f9b4 	bl	8001288 <turn_grn_blinky>
		show_config_val();
 8000f20:	f000 f832 	bl	8000f88 <show_config_val>
		if(is_button_pressed(0)) status = RED_CONFIG;
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fb6f 	bl	8000608 <is_button_pressed>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <fsm_traffic_run+0x422>
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000f32:	2205      	movs	r2, #5
 8000f34:	701a      	strb	r2, [r3, #0]
		if(is_button_pressed(2)){
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff fb66 	bl	8000608 <is_button_pressed>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d013      	beq.n	8000f6a <fsm_traffic_run+0x456>
			ensure_grn_time();
 8000f42:	f000 f9f5 	bl	8001330 <ensure_grn_time>
			status = INIT;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <fsm_traffic_run+0x46c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f4c:	e00d      	b.n	8000f6a <fsm_traffic_run+0x456>
	default:
		break;
 8000f4e:	bf00      	nop
 8000f50:	e00c      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f52:	bf00      	nop
 8000f54:	e00a      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f56:	bf00      	nop
 8000f58:	e008      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f5a:	bf00      	nop
 8000f5c:	e006      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f5e:	bf00      	nop
 8000f60:	e004      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <fsm_traffic_run+0x458>
		break;
 8000f6a:	bf00      	nop
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000ec 	.word	0x200000ec
 8000f74:	200000f0 	.word	0x200000f0
 8000f78:	2000001c 	.word	0x2000001c
 8000f7c:	10624dd3 	.word	0x10624dd3
 8000f80:	200000e8 	.word	0x200000e8
 8000f84:	40010800 	.word	0x40010800

08000f88 <show_config_val>:

void show_config_val(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	int v = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
	switch (status){
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <show_config_val+0x78>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d01a      	beq.n	8000fd0 <show_config_val+0x48>
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	dc22      	bgt.n	8000fe4 <show_config_val+0x5c>
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d002      	beq.n	8000fa8 <show_config_val+0x20>
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d00a      	beq.n	8000fbc <show_config_val+0x34>
		break;
	case GRN_CONFIG:
		v = grn / 1000;
		break;
	default:
		break;
 8000fa6:	e01d      	b.n	8000fe4 <show_config_val+0x5c>
		v = red / 1000;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <show_config_val+0x7c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <show_config_val+0x80>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1192      	asrs	r2, r2, #6
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
		break;
 8000fba:	e014      	b.n	8000fe6 <show_config_val+0x5e>
		v = yel / 1000;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <show_config_val+0x84>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <show_config_val+0x80>)
 8000fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc6:	1192      	asrs	r2, r2, #6
 8000fc8:	17db      	asrs	r3, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	607b      	str	r3, [r7, #4]
		break;
 8000fce:	e00a      	b.n	8000fe6 <show_config_val+0x5e>
		v = grn / 1000;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <show_config_val+0x88>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <show_config_val+0x80>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1192      	asrs	r2, r2, #6
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	607b      	str	r3, [r7, #4]
		break;
 8000fe2:	e000      	b.n	8000fe6 <show_config_val+0x5e>
		break;
 8000fe4:	bf00      	nop
	}
	if(v>99) v = 1;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b63      	cmp	r3, #99	@ 0x63
 8000fea:	dd01      	ble.n	8000ff0 <show_config_val+0x68>
 8000fec:	2301      	movs	r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
	updateLedBuffer(v, v);
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff f98a 	bl	800030c <updateLedBuffer>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000e8 	.word	0x200000e8
 8001004:	20000014 	.word	0x20000014
 8001008:	10624dd3 	.word	0x10624dd3
 800100c:	2000001c 	.word	0x2000001c
 8001010:	20000018 	.word	0x20000018

08001014 <short_press_increase>:

void short_press_increase(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	switch (status){
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <short_press_increase+0x88>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b07      	cmp	r3, #7
 800101e:	d028      	beq.n	8001072 <short_press_increase+0x5e>
 8001020:	2b07      	cmp	r3, #7
 8001022:	dc37      	bgt.n	8001094 <short_press_increase+0x80>
 8001024:	2b05      	cmp	r3, #5
 8001026:	d002      	beq.n	800102e <short_press_increase+0x1a>
 8001028:	2b06      	cmp	r3, #6
 800102a:	d011      	beq.n	8001050 <short_press_increase+0x3c>
	case GRN_CONFIG:
		grn += 1000; if (grn > 99000) grn = 99000;
		show_config_val();
		break;
	default:
		break;
 800102c:	e032      	b.n	8001094 <short_press_increase+0x80>
		red += 1000; if (red > 99000) red = 99000;
 800102e:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <short_press_increase+0x8c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001036:	4a1a      	ldr	r2, [pc, #104]	@ (80010a0 <short_press_increase+0x8c>)
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <short_press_increase+0x8c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <short_press_increase+0x90>)
 8001040:	4293      	cmp	r3, r2
 8001042:	dd02      	ble.n	800104a <short_press_increase+0x36>
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <short_press_increase+0x8c>)
 8001046:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <short_press_increase+0x90>)
 8001048:	601a      	str	r2, [r3, #0]
		show_config_val();
 800104a:	f7ff ff9d 	bl	8000f88 <show_config_val>
		break;
 800104e:	e022      	b.n	8001096 <short_press_increase+0x82>
		yel += 1000; if (yel > 99000) yel = 99000;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <short_press_increase+0x94>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <short_press_increase+0x94>)
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <short_press_increase+0x94>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <short_press_increase+0x90>)
 8001062:	4293      	cmp	r3, r2
 8001064:	dd02      	ble.n	800106c <short_press_increase+0x58>
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <short_press_increase+0x94>)
 8001068:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <short_press_increase+0x90>)
 800106a:	601a      	str	r2, [r3, #0]
		show_config_val();
 800106c:	f7ff ff8c 	bl	8000f88 <show_config_val>
		break;
 8001070:	e011      	b.n	8001096 <short_press_increase+0x82>
		grn += 1000; if (grn > 99000) grn = 99000;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <short_press_increase+0x98>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800107a:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <short_press_increase+0x98>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <short_press_increase+0x98>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <short_press_increase+0x90>)
 8001084:	4293      	cmp	r3, r2
 8001086:	dd02      	ble.n	800108e <short_press_increase+0x7a>
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <short_press_increase+0x98>)
 800108a:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <short_press_increase+0x90>)
 800108c:	601a      	str	r2, [r3, #0]
		show_config_val();
 800108e:	f7ff ff7b 	bl	8000f88 <show_config_val>
		break;
 8001092:	e000      	b.n	8001096 <short_press_increase+0x82>
		break;
 8001094:	bf00      	nop
	}
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000e8 	.word	0x200000e8
 80010a0:	20000014 	.word	0x20000014
 80010a4:	000182b8 	.word	0x000182b8
 80010a8:	2000001c 	.word	0x2000001c
 80010ac:	20000018 	.word	0x20000018

080010b0 <turn_on_red_grn>:

void turn_on_red_grn(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	480e      	ldr	r0, [pc, #56]	@ (80010f4 <turn_on_red_grn+0x44>)
 80010ba:	f000 fcae 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin, SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2102      	movs	r1, #2
 80010c2:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <turn_on_red_grn+0x44>)
 80010c4:	f000 fca9 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin, SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2104      	movs	r1, #4
 80010cc:	4809      	ldr	r0, [pc, #36]	@ (80010f4 <turn_on_red_grn+0x44>)
 80010ce:	f000 fca4 	bl	8001a1a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2108      	movs	r1, #8
 80010d6:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <turn_on_red_grn+0x44>)
 80010d8:	f000 fc9f 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2110      	movs	r1, #16
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <turn_on_red_grn+0x44>)
 80010e2:	f000 fc9a 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <turn_on_red_grn+0x44>)
 80010ec:	f000 fc95 	bl	8001a1a <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <turn_on_red_yel>:

void turn_on_red_yel(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin, RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	480e      	ldr	r0, [pc, #56]	@ (800113c <turn_on_red_yel+0x44>)
 8001102:	f000 fc8a 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2102      	movs	r1, #2
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <turn_on_red_yel+0x44>)
 800110c:	f000 fc85 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2104      	movs	r1, #4
 8001114:	4809      	ldr	r0, [pc, #36]	@ (800113c <turn_on_red_yel+0x44>)
 8001116:	f000 fc80 	bl	8001a1a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2108      	movs	r1, #8
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <turn_on_red_yel+0x44>)
 8001120:	f000 fc7b 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2110      	movs	r1, #16
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <turn_on_red_yel+0x44>)
 800112a:	f000 fc76 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2120      	movs	r1, #32
 8001132:	4802      	ldr	r0, [pc, #8]	@ (800113c <turn_on_red_yel+0x44>)
 8001134:	f000 fc71 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010c00 	.word	0x40010c00

08001140 <turn_on_grn_red>:

void turn_on_grn_red(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	480e      	ldr	r0, [pc, #56]	@ (8001184 <turn_on_grn_red+0x44>)
 800114a:	f000 fc66 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin, SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2102      	movs	r1, #2
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <turn_on_grn_red+0x44>)
 8001154:	f000 fc61 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin, RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <turn_on_grn_red+0x44>)
 800115e:	f000 fc5c 	bl	8001a1a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2108      	movs	r1, #8
 8001166:	4807      	ldr	r0, [pc, #28]	@ (8001184 <turn_on_grn_red+0x44>)
 8001168:	f000 fc57 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2110      	movs	r1, #16
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <turn_on_grn_red+0x44>)
 8001172:	f000 fc52 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2120      	movs	r1, #32
 800117a:	4802      	ldr	r0, [pc, #8]	@ (8001184 <turn_on_grn_red+0x44>)
 800117c:	f000 fc4d 	bl	8001a1a <HAL_GPIO_WritePin>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010c00 	.word	0x40010c00

08001188 <turn_on_yel_red>:

void turn_on_yel_red(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin, SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2101      	movs	r1, #1
 8001190:	480e      	ldr	r0, [pc, #56]	@ (80011cc <turn_on_yel_red+0x44>)
 8001192:	f000 fc42 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2102      	movs	r1, #2
 800119a:	480c      	ldr	r0, [pc, #48]	@ (80011cc <turn_on_yel_red+0x44>)
 800119c:	f000 fc3d 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin, SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2104      	movs	r1, #4
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <turn_on_yel_red+0x44>)
 80011a6:	f000 fc38 	bl	8001a1a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2108      	movs	r1, #8
 80011ae:	4807      	ldr	r0, [pc, #28]	@ (80011cc <turn_on_yel_red+0x44>)
 80011b0:	f000 fc33 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <turn_on_yel_red+0x44>)
 80011ba:	f000 fc2e 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2120      	movs	r1, #32
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <turn_on_yel_red+0x44>)
 80011c4:	f000 fc29 	bl	8001a1a <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40010c00 	.word	0x40010c00

080011d0 <turn_red_blinky>:
	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, SET);
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, SET);
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, SET);
}

void turn_red_blinky(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin, SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <turn_red_blinky+0x58>)
 80011da:	f000 fc1e 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin, SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2104      	movs	r1, #4
 80011e2:	4811      	ldr	r0, [pc, #68]	@ (8001228 <turn_red_blinky+0x58>)
 80011e4:	f000 fc19 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	480e      	ldr	r0, [pc, #56]	@ (8001228 <turn_red_blinky+0x58>)
 80011ee:	f000 fc14 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2120      	movs	r1, #32
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <turn_red_blinky+0x58>)
 80011f8:	f000 fc0f 	bl	8001a1a <HAL_GPIO_WritePin>
	if(isTimerExperied(2)){
 80011fc:	2002      	movs	r0, #2
 80011fe:	f7ff fbdd 	bl	80009bc <isTimerExperied>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <turn_red_blinky+0x52>
		HAL_GPIO_TogglePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin);
 8001208:	2101      	movs	r1, #1
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <turn_red_blinky+0x58>)
 800120c:	f000 fc1d 	bl	8001a4a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin);
 8001210:	2108      	movs	r1, #8
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <turn_red_blinky+0x58>)
 8001214:	f000 fc19 	bl	8001a4a <HAL_GPIO_TogglePin>
		setTimer(2, 500);
 8001218:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fb7d 	bl	800091c <setTimer>
	}
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40010c00 	.word	0x40010c00

0800122c <turn_yel_blinky>:

void turn_yel_blinky(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin, SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2101      	movs	r1, #1
 8001234:	4813      	ldr	r0, [pc, #76]	@ (8001284 <turn_yel_blinky+0x58>)
 8001236:	f000 fbf0 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin, SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2104      	movs	r1, #4
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <turn_yel_blinky+0x58>)
 8001240:	f000 fbeb 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2108      	movs	r1, #8
 8001248:	480e      	ldr	r0, [pc, #56]	@ (8001284 <turn_yel_blinky+0x58>)
 800124a:	f000 fbe6 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin, SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2120      	movs	r1, #32
 8001252:	480c      	ldr	r0, [pc, #48]	@ (8001284 <turn_yel_blinky+0x58>)
 8001254:	f000 fbe1 	bl	8001a1a <HAL_GPIO_WritePin>
	if(isTimerExperied(2)){
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff fbaf 	bl	80009bc <isTimerExperied>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <turn_yel_blinky+0x52>
		HAL_GPIO_TogglePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin);
 8001264:	2102      	movs	r1, #2
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <turn_yel_blinky+0x58>)
 8001268:	f000 fbef 	bl	8001a4a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin);
 800126c:	2110      	movs	r1, #16
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <turn_yel_blinky+0x58>)
 8001270:	f000 fbeb 	bl	8001a4a <HAL_GPIO_TogglePin>
		setTimer(2, 500);
 8001274:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff fb4f 	bl	800091c <setTimer>
	}
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40010c00 	.word	0x40010c00

08001288 <turn_grn_blinky>:

void turn_grn_blinky(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_0_SGN_GPIO_Port, RED_0_SGN_Pin, SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2101      	movs	r1, #1
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <turn_grn_blinky+0x58>)
 8001292:	f000 fbc2 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_0_SGN_GPIO_Port, YEL_0_SGN_Pin, SET);
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <turn_grn_blinky+0x58>)
 800129c:	f000 fbbd 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_1_SGN_GPIO_Port, RED_1_SGN_Pin, SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2108      	movs	r1, #8
 80012a4:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <turn_grn_blinky+0x58>)
 80012a6:	f000 fbb8 	bl	8001a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_1_SGN_GPIO_Port, YEL_1_SGN_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <turn_grn_blinky+0x58>)
 80012b0:	f000 fbb3 	bl	8001a1a <HAL_GPIO_WritePin>
	if(isTimerExperied(2)){
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff fb81 	bl	80009bc <isTimerExperied>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00c      	beq.n	80012da <turn_grn_blinky+0x52>
		HAL_GPIO_TogglePin(GRE_0_SGN_GPIO_Port, GRE_0_SGN_Pin);
 80012c0:	2104      	movs	r1, #4
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <turn_grn_blinky+0x58>)
 80012c4:	f000 fbc1 	bl	8001a4a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GRE_1_SGN_GPIO_Port, GRE_1_SGN_Pin);
 80012c8:	2120      	movs	r1, #32
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <turn_grn_blinky+0x58>)
 80012cc:	f000 fbbd 	bl	8001a4a <HAL_GPIO_TogglePin>
		setTimer(2, 500);
 80012d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fb21 	bl	800091c <setTimer>
	}
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <ensure_red_time>:

void ensure_red_time(){
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	if(grn < red){
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <ensure_red_time+0x40>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <ensure_red_time+0x44>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	da07      	bge.n	8001304 <ensure_red_time+0x20>
		grn = red - yel;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <ensure_red_time+0x44>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <ensure_red_time+0x48>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <ensure_red_time+0x40>)
 8001300:	6013      	str	r3, [r2, #0]
	else {
		red = 7000;
		yel = 2000;
		grn = 5000;
	}
}
 8001302:	e00b      	b.n	800131c <ensure_red_time+0x38>
		red = 7000;
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <ensure_red_time+0x44>)
 8001306:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800130a:	601a      	str	r2, [r3, #0]
		yel = 2000;
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <ensure_red_time+0x48>)
 800130e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001312:	601a      	str	r2, [r3, #0]
		grn = 5000;
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <ensure_red_time+0x40>)
 8001316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000018 	.word	0x20000018
 8001328:	20000014 	.word	0x20000014
 800132c:	2000001c 	.word	0x2000001c

08001330 <ensure_grn_time>:

void ensure_grn_time(){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	if(grn < red){
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <ensure_grn_time+0x40>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <ensure_grn_time+0x44>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	da07      	bge.n	8001350 <ensure_grn_time+0x20>
		grn = red - yel;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <ensure_grn_time+0x44>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <ensure_grn_time+0x48>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <ensure_grn_time+0x40>)
 800134c:	6013      	str	r3, [r2, #0]
	else {
		red = 7000;
		yel = 2000;
		grn = 5000;
	}
}
 800134e:	e00b      	b.n	8001368 <ensure_grn_time+0x38>
		red = 7000;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <ensure_grn_time+0x44>)
 8001352:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001356:	601a      	str	r2, [r3, #0]
		yel = 2000;
 8001358:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <ensure_grn_time+0x48>)
 800135a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800135e:	601a      	str	r2, [r3, #0]
		grn = 5000;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <ensure_grn_time+0x40>)
 8001362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000018 	.word	0x20000018
 8001374:	20000014 	.word	0x20000014
 8001378:	2000001c 	.word	0x2000001c

0800137c <ensure_yel_time>:

void ensure_yel_time(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	if(yel < grn){
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <ensure_yel_time+0x40>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <ensure_yel_time+0x44>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	da07      	bge.n	800139c <ensure_yel_time+0x20>
		yel = red - grn;
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <ensure_yel_time+0x48>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <ensure_yel_time+0x44>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <ensure_yel_time+0x40>)
 8001398:	6013      	str	r3, [r2, #0]
	else {
		red = 7000;
		yel = 2000;
		grn = 5000;
	}
}
 800139a:	e00b      	b.n	80013b4 <ensure_yel_time+0x38>
		red = 7000;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <ensure_yel_time+0x48>)
 800139e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80013a2:	601a      	str	r2, [r3, #0]
		yel = 2000;
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <ensure_yel_time+0x40>)
 80013a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013aa:	601a      	str	r2, [r3, #0]
		grn = 5000;
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <ensure_yel_time+0x44>)
 80013ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	2000001c 	.word	0x2000001c
 80013c0:	20000018 	.word	0x20000018
 80013c4:	20000014 	.word	0x20000014

080013c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c8:	f7ff fb9e 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013cc:	480b      	ldr	r0, [pc, #44]	@ (80013fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ce:	490c      	ldr	r1, [pc, #48]	@ (8001400 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e4:	4c09      	ldr	r4, [pc, #36]	@ (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f2:	f001 fb05 	bl	8002a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f6:	f7ff f959 	bl	80006ac <main>
  bx lr
 80013fa:	4770      	bx	lr
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001404:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 8001408:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800140c:	200000f8 	.word	0x200000f8

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x28>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f923 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fade 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f93b 	bl	80016da <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f903 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000010 	.word	0x20000010
 8001498:	20000024 	.word	0x20000024
 800149c:	20000020 	.word	0x20000020

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x1c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_IncTick+0x20>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a03      	ldr	r2, [pc, #12]	@ (80014c0 <HAL_IncTick+0x20>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000024 	.word	0x20000024
 80014c0:	200000f4 	.word	0x200000f4

080014c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b02      	ldr	r3, [pc, #8]	@ (80014d4 <HAL_GetTick+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	200000f4 	.word	0x200000f4

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4906      	ldr	r1, [pc, #24]	@ (8001570 <__NVIC_EnableIRQ+0x34>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff90 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff2d 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff42 	bl	8001520 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff90 	bl	80015c8 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5f 	bl	8001574 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff35 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b08b      	sub	sp, #44	@ 0x2c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e161      	b.n	80019cc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001708:	2201      	movs	r2, #1
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8150 	bne.w	80019c6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4a97      	ldr	r2, [pc, #604]	@ (8001988 <HAL_GPIO_Init+0x294>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d05e      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001730:	4a95      	ldr	r2, [pc, #596]	@ (8001988 <HAL_GPIO_Init+0x294>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d875      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001736:	4a95      	ldr	r2, [pc, #596]	@ (800198c <HAL_GPIO_Init+0x298>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d058      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 800173c:	4a93      	ldr	r2, [pc, #588]	@ (800198c <HAL_GPIO_Init+0x298>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d86f      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001742:	4a93      	ldr	r2, [pc, #588]	@ (8001990 <HAL_GPIO_Init+0x29c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d052      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001748:	4a91      	ldr	r2, [pc, #580]	@ (8001990 <HAL_GPIO_Init+0x29c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d869      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800174e:	4a91      	ldr	r2, [pc, #580]	@ (8001994 <HAL_GPIO_Init+0x2a0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d04c      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001754:	4a8f      	ldr	r2, [pc, #572]	@ (8001994 <HAL_GPIO_Init+0x2a0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d863      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800175a:	4a8f      	ldr	r2, [pc, #572]	@ (8001998 <HAL_GPIO_Init+0x2a4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d046      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
 8001760:	4a8d      	ldr	r2, [pc, #564]	@ (8001998 <HAL_GPIO_Init+0x2a4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d85d      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 8001766:	2b12      	cmp	r3, #18
 8001768:	d82a      	bhi.n	80017c0 <HAL_GPIO_Init+0xcc>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d859      	bhi.n	8001822 <HAL_GPIO_Init+0x12e>
 800176e:	a201      	add	r2, pc, #4	@ (adr r2, 8001774 <HAL_GPIO_Init+0x80>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017c9 	.word	0x080017c9
 800177c:	080017db 	.word	0x080017db
 8001780:	0800181d 	.word	0x0800181d
 8001784:	08001823 	.word	0x08001823
 8001788:	08001823 	.word	0x08001823
 800178c:	08001823 	.word	0x08001823
 8001790:	08001823 	.word	0x08001823
 8001794:	08001823 	.word	0x08001823
 8001798:	08001823 	.word	0x08001823
 800179c:	08001823 	.word	0x08001823
 80017a0:	08001823 	.word	0x08001823
 80017a4:	08001823 	.word	0x08001823
 80017a8:	08001823 	.word	0x08001823
 80017ac:	08001823 	.word	0x08001823
 80017b0:	08001823 	.word	0x08001823
 80017b4:	08001823 	.word	0x08001823
 80017b8:	080017d1 	.word	0x080017d1
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	4a76      	ldr	r2, [pc, #472]	@ (800199c <HAL_GPIO_Init+0x2a8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c6:	e02c      	b.n	8001822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e029      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	3304      	adds	r3, #4
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e024      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	3308      	adds	r3, #8
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e01f      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	330c      	adds	r3, #12
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e01a      	b.n	8001824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f6:	2304      	movs	r3, #4
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e013      	b.n	8001824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	611a      	str	r2, [r3, #16]
          break;
 800180e:	e009      	b.n	8001824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001810:	2308      	movs	r3, #8
 8001812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	615a      	str	r2, [r3, #20]
          break;
 800181a:	e003      	b.n	8001824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x130>
          break;
 8001822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2bff      	cmp	r3, #255	@ 0xff
 8001828:	d801      	bhi.n	800182e <HAL_GPIO_Init+0x13a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	e001      	b.n	8001832 <HAL_GPIO_Init+0x13e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2bff      	cmp	r3, #255	@ 0xff
 8001838:	d802      	bhi.n	8001840 <HAL_GPIO_Init+0x14c>
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x152>
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	3b08      	subs	r3, #8
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	210f      	movs	r1, #15
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a9 	beq.w	80019c6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001874:	4b4a      	ldr	r3, [pc, #296]	@ (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a49      	ldr	r2, [pc, #292]	@ (80019a0 <HAL_GPIO_Init+0x2ac>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b47      	ldr	r3, [pc, #284]	@ (80019a0 <HAL_GPIO_Init+0x2ac>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800188c:	4a45      	ldr	r2, [pc, #276]	@ (80019a4 <HAL_GPIO_Init+0x2b0>)
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3d      	ldr	r2, [pc, #244]	@ (80019a8 <HAL_GPIO_Init+0x2b4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3c      	ldr	r2, [pc, #240]	@ (80019ac <HAL_GPIO_Init+0x2b8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1dc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3b      	ldr	r2, [pc, #236]	@ (80019b0 <HAL_GPIO_Init+0x2bc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1d8>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018d4:	2300      	movs	r3, #0
 80018d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e6:	492f      	ldr	r1, [pc, #188]	@ (80019a4 <HAL_GPIO_Init+0x2b0>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b2c      	ldr	r3, [pc, #176]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	492b      	ldr	r1, [pc, #172]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190e:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4927      	ldr	r1, [pc, #156]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001918:	4013      	ands	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4921      	ldr	r1, [pc, #132]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	491d      	ldr	r1, [pc, #116]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001940:	4013      	ands	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4917      	ldr	r1, [pc, #92]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4913      	ldr	r1, [pc, #76]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 8001968:	4013      	ands	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01f      	beq.n	80019b8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	490d      	ldr	r1, [pc, #52]	@ (80019b4 <HAL_GPIO_Init+0x2c0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e01f      	b.n	80019c6 <HAL_GPIO_Init+0x2d2>
 8001986:	bf00      	nop
 8001988:	10320000 	.word	0x10320000
 800198c:	10310000 	.word	0x10310000
 8001990:	10220000 	.word	0x10220000
 8001994:	10210000 	.word	0x10210000
 8001998:	10120000 	.word	0x10120000
 800199c:	10110000 	.word	0x10110000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010800 	.word	0x40010800
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_GPIO_Init+0x2f4>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	43db      	mvns	r3, r3
 80019c0:	4909      	ldr	r1, [pc, #36]	@ (80019e8 <HAL_GPIO_Init+0x2f4>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	3301      	adds	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f ae96 	bne.w	8001708 <HAL_GPIO_Init+0x14>
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	372c      	adds	r7, #44	@ 0x2c
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e001      	b.n	8001a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]
 8001a26:	4613      	mov	r3, r2
 8001a28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a2a:	787b      	ldrb	r3, [r7, #1]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a30:	887a      	ldrh	r2, [r7, #2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	041a      	lsls	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	611a      	str	r2, [r3, #16]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5c:	887a      	ldrh	r2, [r7, #2]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	041a      	lsls	r2, r3, #16
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	611a      	str	r2, [r3, #16]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e272      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9c:	4b92      	ldr	r3, [pc, #584]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d112      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
 8001ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac0:	d10b      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac2:	4b89      	ldr	r3, [pc, #548]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d06c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x12c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d168      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e24c      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x76>
 8001ae4:	4b80      	ldr	r3, [pc, #512]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e02e      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7a      	ldr	r2, [pc, #488]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b78      	ldr	r3, [pc, #480]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a77      	ldr	r2, [pc, #476]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0xbc>
 8001b1e:	4b72      	ldr	r3, [pc, #456]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a71      	ldr	r2, [pc, #452]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b38:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b68      	ldr	r3, [pc, #416]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a67      	ldr	r2, [pc, #412]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fcb4 	bl	80014c4 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fcb0 	bl	80014c4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e200      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe4>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fca0 	bl	80014c4 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fc9c 	bl	80014c4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1ec      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b53      	ldr	r3, [pc, #332]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x10c>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc2:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x18c>
 8001bce:	4b46      	ldr	r3, [pc, #280]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x176>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1c0      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4939      	ldr	r1, [pc, #228]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff fc55 	bl	80014c4 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fc51 	bl	80014c4 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1a1      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4927      	ldr	r1, [pc, #156]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fc34 	bl	80014c4 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff fc30 	bl	80014c4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e180      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d03a      	beq.n	8001d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d019      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fc14 	bl	80014c4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc10 	bl	80014c4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e160      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f000 fa9c 	bl	80021fc <RCC_Delay>
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fbfa 	bl	80014c4 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fbf6 	bl	80014c4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d908      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e146      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	42420000 	.word	0x42420000
 8001cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b92      	ldr	r3, [pc, #584]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e9      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80a6 	beq.w	8001e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b8b      	ldr	r3, [pc, #556]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b88      	ldr	r3, [pc, #544]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a87      	ldr	r2, [pc, #540]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b85      	ldr	r3, [pc, #532]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b82      	ldr	r3, [pc, #520]	@ (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b7f      	ldr	r3, [pc, #508]	@ (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fbb7 	bl	80014c4 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7ff fbb3 	bl	80014c4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	@ 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e103      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b75      	ldr	r3, [pc, #468]	@ (8001f44 <HAL_RCC_OscConfig+0x4c8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x312>
 8001d80:	4b6f      	ldr	r3, [pc, #444]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a6e      	ldr	r2, [pc, #440]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x334>
 8001d96:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a69      	ldr	r2, [pc, #420]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b67      	ldr	r3, [pc, #412]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a66      	ldr	r2, [pc, #408]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	e01c      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x356>
 8001db8:	4b61      	ldr	r3, [pc, #388]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a60      	ldr	r2, [pc, #384]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e00b      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a57      	ldr	r2, [pc, #348]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fb67 	bl	80014c4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff fb63 	bl	80014c4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0b1      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	4b4b      	ldr	r3, [pc, #300]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ee      	beq.n	8001dfa <HAL_RCC_OscConfig+0x37e>
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fb51 	bl	80014c4 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff fb4d 	bl	80014c4 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e09b      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	4b40      	ldr	r3, [pc, #256]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d061      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d146      	bne.n	8001f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fb21 	bl	80014c4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff fb1d 	bl	80014c4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e06d      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f0      	bne.n	8001e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eae:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4921      	ldr	r1, [pc, #132]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a19      	ldr	r1, [r3, #32]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	491b      	ldr	r1, [pc, #108]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x4cc>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff faf1 	bl	80014c4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff faed 	bl	80014c4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e03d      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46a>
 8001f04:	e035      	b.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_RCC_OscConfig+0x4cc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fada 	bl	80014c4 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fad6 	bl	80014c4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e026      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x498>
 8001f32:	e01e      	b.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e019      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d0      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b6a      	ldr	r3, [pc, #424]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b67      	ldr	r3, [pc, #412]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4965      	ldr	r1, [pc, #404]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d040      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e073      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3d      	ldr	r3, [pc, #244]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06b      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4936      	ldr	r1, [pc, #216]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7ff fa28 	bl	80014c4 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7ff fa24 	bl	80014c4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e053      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d210      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4922      	ldr	r1, [pc, #136]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	@ (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1cc>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_ClockConfig+0x1d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f986 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
 8002148:	08002a60 	.word	0x08002a60
 800214c:	20000010 	.word	0x20000010
 8002150:	20000020 	.word	0x20000020

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e027      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	e027      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	613b      	str	r3, [r7, #16]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	693b      	ldr	r3, [r7, #16]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	08002a70 	.word	0x08002a70
 80021f4:	08002a80 	.word	0x08002a80
 80021f8:	003d0900 	.word	0x003d0900

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000010 	.word	0x20000010
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e041      	b.n	80022ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fbf8 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fa56 	bl	8002728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e035      	b.n	800235c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a16      	ldr	r2, [pc, #88]	@ (8002368 <HAL_TIM_Base_Start_IT+0x90>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x4e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231a:	d004      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x4e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a12      	ldr	r2, [pc, #72]	@ (800236c <HAL_TIM_Base_Start_IT+0x94>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d010      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002348:	e007      	b.n	800235a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400

08002370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d020      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0202 	mvn.w	r2, #2
 80023a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f998 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f98b 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f99a 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d020      	beq.n	8002420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0204 	mvn.w	r2, #4
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f972 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f965 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f974 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0208 	mvn.w	r2, #8
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2204      	movs	r2, #4
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f94c 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f93f 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f94e 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2208      	movs	r2, #8
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f926 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f919 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f928 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0201 	mvn.w	r2, #1
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe f9ea 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa6f 	bl	80029de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00c      	beq.n	8002524 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8f8 	bl	8002714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0220 	mvn.w	r2, #32
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa42 	bl	80029cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIM_ConfigClockSource+0x1c>
 8002568:	2302      	movs	r3, #2
 800256a:	e0b4      	b.n	80026d6 <HAL_TIM_ConfigClockSource+0x186>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800258a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a4:	d03e      	beq.n	8002624 <HAL_TIM_ConfigClockSource+0xd4>
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025aa:	f200 8087 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_TIM_ConfigClockSource+0x172>
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ba:	d87f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b70      	cmp	r3, #112	@ 0x70
 80025be:	d01a      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0xa6>
 80025c0:	2b70      	cmp	r3, #112	@ 0x70
 80025c2:	d87b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b60      	cmp	r3, #96	@ 0x60
 80025c6:	d050      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x11a>
 80025c8:	2b60      	cmp	r3, #96	@ 0x60
 80025ca:	d877      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b50      	cmp	r3, #80	@ 0x50
 80025ce:	d03c      	beq.n	800264a <HAL_TIM_ConfigClockSource+0xfa>
 80025d0:	2b50      	cmp	r3, #80	@ 0x50
 80025d2:	d873      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b40      	cmp	r3, #64	@ 0x40
 80025d6:	d058      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x13a>
 80025d8:	2b40      	cmp	r3, #64	@ 0x40
 80025da:	d86f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b30      	cmp	r3, #48	@ 0x30
 80025de:	d064      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	2b30      	cmp	r3, #48	@ 0x30
 80025e2:	d86b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d060      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d867      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d05c      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d05a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	e062      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002606:	f000 f96a 	bl	80028de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
      break;
 8002622:	e04f      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002634:	f000 f953 	bl	80028de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002646:	609a      	str	r2, [r3, #8]
      break;
 8002648:	e03c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8ca 	bl	80027f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2150      	movs	r1, #80	@ 0x50
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f921 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002668:	e02c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f8e8 	bl	800284c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2160      	movs	r1, #96	@ 0x60
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f911 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002688:	e01c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	461a      	mov	r2, r3
 8002698:	f000 f8aa 	bl	80027f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2140      	movs	r1, #64	@ 0x40
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f901 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026a8:	e00c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 f8f8 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026ba:	e003      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	e000      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a2b      	ldr	r2, [pc, #172]	@ (80027e8 <TIM_Base_SetConfig+0xc0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <TIM_Base_SetConfig+0x28>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x28>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a28      	ldr	r2, [pc, #160]	@ (80027ec <TIM_Base_SetConfig+0xc4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a20      	ldr	r2, [pc, #128]	@ (80027e8 <TIM_Base_SetConfig+0xc0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x52>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x52>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <TIM_Base_SetConfig+0xc4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
  }
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800281a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 030a 	bic.w	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0210 	bic.w	r2, r3, #16
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f043 0307 	orr.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e041      	b.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a14      	ldr	r2, [pc, #80]	@ (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002980:	d004      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a10      	ldr	r2, [pc, #64]	@ (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10c      	bne.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400

080029cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <memset>:
 80029f0:	4603      	mov	r3, r0
 80029f2:	4402      	add	r2, r0
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d100      	bne.n	80029fa <memset+0xa>
 80029f8:	4770      	bx	lr
 80029fa:	f803 1b01 	strb.w	r1, [r3], #1
 80029fe:	e7f9      	b.n	80029f4 <memset+0x4>

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	2600      	movs	r6, #0
 8002a04:	4d0c      	ldr	r5, [pc, #48]	@ (8002a38 <__libc_init_array+0x38>)
 8002a06:	4c0d      	ldr	r4, [pc, #52]	@ (8002a3c <__libc_init_array+0x3c>)
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	42a6      	cmp	r6, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	f000 f81a 	bl	8002a48 <_init>
 8002a14:	2600      	movs	r6, #0
 8002a16:	4d0a      	ldr	r5, [pc, #40]	@ (8002a40 <__libc_init_array+0x40>)
 8002a18:	4c0a      	ldr	r4, [pc, #40]	@ (8002a44 <__libc_init_array+0x44>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	42a6      	cmp	r6, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a28:	4798      	blx	r3
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a32:	4798      	blx	r3
 8002a34:	3601      	adds	r6, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08002a84 	.word	0x08002a84
 8002a3c:	08002a84 	.word	0x08002a84
 8002a40:	08002a84 	.word	0x08002a84
 8002a44:	08002a88 	.word	0x08002a88

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
